a <- available.packages()
View(a)
install.packages("KernSmooth")
library("KernSmooth")
search()
find.package("devtools")
find.package("devtools")
library(devtools)
find.package("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
logout
swirl()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl(0)
ls(0)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace =TRUE)
sample(1:6, 4, replace =TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
swirl(0)
t1
class(t1)
unlass(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<- c("October 17, 1986 08:24")
t3<- c(""October 17, 1986 08:24")
t3<- c(""October 17, 1986 08:24"")
t3<- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time, t1, units = "days")
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y = cars$dist)
plot(x=cars$dist, y = cars$speed)
plot(x=cars$speed, y = cars$dist, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
head(mtcars)
summary(mtcars)
str(mtcars)
nxt()
?boxplot
boxplot(mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
str(mtcars)
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl=4, mean))
debug(ls)
ls(0)
data(iris)
?iris
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1),d=rnorm(100,5))
lapply(x, mean)
x<-1:4
lapply(x, runif)
lapply(x, runifn min=0, max=10)
lapply(x, runif, min=0, max=10)
x<-list(a=matrix(1:4, 2, 2), b=matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
str(apply)
x<-matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, mean)
apply(x, 1, sum)
apply(x,1,quantile, probs=c(.25,.75))
a<-array(rnorm(2*2*10), c(2,2,10))
apply(a, c(1,2),mean)
rowMeans(a, dims=2)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep, 1:4, 4:1)
library(datasets)
head(airquality)
s<-split(airquality,airquality$Month)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")], na.rm = TRUE))
x<-rnorm(10)
f1<-gl(2,5)
f1<-gl(5,2)
f1
f2
f1<-gl(5,2)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2), drop = TRUE))
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 1, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
rowMeans(iris[,1:4])
data(mtcars)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
a<-with(mtcars, tapply(mpg, cyl, mean))
a
a$4
a[4]
a[1]
a.names
names(a)
a[name=4]
a[names=4]
a[names==4]
a[names=="4"]
a[names="4"]
abs(a[names="4"]-a[names="8"])
log(-1)
printmessage<-function(x) {}
printmessage<-function(x) {
if(x>0) print("x>0")
else print("x<=0")
invisible(x)
}
printmessage(1)
printmessage(NA)
x
mean(x)
mean(g)
traceback()
lm(r-t)
traceback()
debug(lm)
lm(r-t)
head(mtcars)
mtcars(hp)
mtcars$hp
str(mtcars)
with(mtcars, tapply(hp, cyl, mean))
mn<-with(mtcars, tapply(hp, cyl, mean))
abs(mn(names="4")-mn(names="8"))
mn
abs(mn[names="4"]-mn[names="8"])
dir()
setwd("~/R/R_Programming/ProgrammingAssignment2")
ls
ls()
dir()
?solve
matrix(1,2)
matrix(3,4)
matrix(data=3,4)
matrix(data=c(3,4))
matrix(c(3,4))
source(cashematrix.R)
source(cachematrix.R)
ls
ls()
dir(0)
dir()
source(cachematrix.R)
source("cachematrix.R")
abc = matrix(1:4)
abc
solve(abc)
abc = matrix(1:4, 2,2)
abc
solve(abc)
cacheSolve(abc)
makeCacheMatrix(abc)
debug(cacheSolve)
cacheSolve(abc)
debug(makeCacheMatrix)
makeCacheMatrix(abc)
abc$get
abc$set
cacheSolve(makeCacheMatrix(abc))
n
cacheSolve(makeCacheMatrix(abc))
q
q
q
q
cacheSolve(makeCacheMatrix(abc))
undebug(cacheSolve)
cacheSolve(makeCacheMatrix(abc))
debugonce(cacheSolve)
cacheSolve(makeCacheMatrix(abc))
cacheSolve(makeCacheMatrix(abc))
Q
Q()
q90
q()
